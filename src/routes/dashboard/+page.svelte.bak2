<script lang="ts">
	import { goto } from '$app/navigation';
	import type { PageData } from './$types';
	import { PartForm } from '$lib/components';
	import { superForm } from 'sveltekit-superforms/client';
	import { parseContactInfo } from '$lib/utils/util';
	import CategoryComboBox from '$lib/components/CategoryComboBox.svelte';
	import Category from '$lib/components/category.svelte';
	import type { Category as CategoryType } from '$lib/server/db/types';
	import { onMount } from 'svelte';

	export let data: PageData;
	const user = data.user!;
	const projects = data.projects;

	// Ensure fullName is a string for rendering
	const fullName = user.fullName ?? '';
	const initial = fullName.charAt(0) || '';

	// Tab management
	type TabType = 'projects' | 'parts' | 'manufacturers' | 'suppliers' | 'categories';
	let activeTab: TabType = 'projects';
	
	// Form visibility toggles
	let showPartForm = false;
	let showManufacturerForm = false;
	let showSupplierForm = false;
	let showCategoryForm = false;

	// Format field names from camelCase to Title Case with spaces
	function formatFieldName(fieldName: string): string {
		// Add space before capital letters and capitalize the first letter
		const formatted = fieldName
			.replace(/([A-Z])/g, ' $1') // Add space before capital letters
			.replace(/^./, (str) => str.toUpperCase()); // Capitalize first letter
		return formatted.trim();
	}
	
	// Process contact info for dashboard display
	function processContactInfo(info: any): { email?: string; phone?: string; address?: string; text?: string } {
		const result: { email?: string; phone?: string; address?: string; text?: string } = {};
		
		if (!info) return result;
		
		// If it's already a parsed object, just return it
		if (typeof info === 'object' && info !== null) {
			if ('email' in info) result.email = info.email;
			if ('phone' in info) result.phone = info.phone;
			if ('address' in info) result.address = info.address;
			return result;
		}
		
		// If it's a string, try to parse it as JSON
		if (typeof info === 'string') {
			try {
				// Try JSON parsing first
				if (info.trim().startsWith('{')) {
					const parsed = JSON.parse(info);
					if ('email' in parsed) result.email = parsed.email;
					if ('phone' in parsed) result.phone = parsed.phone;
					if ('address' in parsed) result.address = parsed.address;
					return result;
				}
				
				// Look for email:value format
				if (info.includes(':')) {
					const pairs = info.split(/[;,\n]+/);
					
					for (const pair of pairs) {
						const parts = pair.split(':');
						if (parts.length >= 2) {
							const key = parts[0].trim().toLowerCase();
							const value = parts.slice(1).join(':').trim();
							
							if (key.includes('email')) result.email = value;
							else if (key.includes('phone') || key.includes('tel')) result.phone = value;
							else if (key.includes('address')) result.address = value;
						}
					}
					
					if (Object.keys(result).length > 0) return result;
				}
				
				// Default to storing as simple text
				result.text = info;
				return result;
			} catch (e) {
				// If JSON parsing fails, just store as text
				result.text = info;
				return result;
			}
		}
		
		return result;
	}

	// Function to handle tab changes
	function setActiveTab(tab: TabType): void {
		activeTab = tab;
	}
	
	// All categories data for ComboBox in both create and edit forms
	let allCategories: CategoryType[] = [];

	// Initialize part form with superForm
	const { form: partForm, errors: partErrors, enhance: partEnhance, submitting: partSubmitting, message: partMessage } = superForm(data.partForm, {
		dataType: 'json',
		onSubmit: ({ cancel, formData, formElement }) => {
			// Make sure we're using the correct action URL with the named action
			formElement.setAttribute('action', '?/part');
		},
		onResult: ({ result }) => {
			// Handle successful submission
			if (result.type === 'success') {
				showPartForm = false;
				// Reload the page to get updated parts list
				window.location.reload();
			}
			// Don't reset the form on error to preserve user input
		}
	});

	// Initialize manufacturer form with superForm
	const { form: manufacturerForm, errors: manufacturerErrors, enhance: manufacturerEnhance, submitting: manufacturerSubmitting, message: manufacturerMessage } = superForm(data.manufacturerForm, {
		dataType: 'json',
		onResult: ({ result }) => {
			// Handle successful submission
			if (result.type === 'success') {
				showManufacturerForm = false;
				// Reload the page to get updated manufacturers list
				window.location.reload();
			}
			// Don't reset the form on error to preserve user input
		}
	});

	// Initialize category form with superForm
	const { form: categoryForm, errors: categoryErrors, enhance: categoryEnhance, submitting: categorySubmitting, message: categoryMessage } = superForm(data.categoryForm, {
		dataType: 'json',
		onResult: ({ result }) => {
			// Handle successful submission
			if (result.type === 'success') {
				showCategoryForm = false;
				// Reload the page to get updated categories list
				window.location.reload();
			}
			// Don't reset the form on error to preserve user input
		}
	});

	// Initialize supplier form with superForm
	const { form: supplierForm, errors: supplierErrors, enhance: supplierEnhance, submitting: supplierSubmitting, message: supplierMessage } = superForm(data.supplierForm, {
		dataType: 'form',
		resetForm: true,
		onResult: ({ result }) => {
			if (result.type === 'success') {
				// Close the form
				showCategoryForm = false;
				
				// Reset edit mode
				editCategoryMode = false;
				currentCategoryId = null;
				
				// Reset the form to initial values
				// Form will be reset automatically due to resetForm: true
				
				// Display a success message
				$categoryMessage = editCategoryMode ? 'Category updated successfully!' : 'Category created successfully!';
				
				// Reload the page to refresh data
				setTimeout(() => {
					window.location.reload();
				}, 500);
			}
		}
	});

	// User entities from server
	const userParts = data.userParts || [];
	const userManufacturers = data.userManufacturers || [];
	const userSuppliers = data.userSuppliers || [];
	const userCategories = data.userCategories || [];
	const categories = data.categories || [];

	// Edit mode tracking
	let editCategoryMode = false;
	let currentCategoryId: string | null = null;
	
	// Function to handle edit button click
	function editCategory(category: any) {
		// Set category ID being edited
		currentCategoryId = category.id;
		
		// Populate form with category data
		$categoryForm = {
			name: category.name,
			description: category.description || '',
			parent_id: category.parent_id || '',
			is_public: Boolean(category.is_public)
		};
		
		// Find and display the parent category by name in the allCategories list
		// This ensures the CategoryComboBox displays parent names correctly
		// Already handled by the CategoryComboBox component with the parent_name field
		
		// Show form and set edit mode
		showCategoryForm = true;
		editCategoryMode = true;
	}
	
	// Function to cancel editing
	function cancelCategoryEdit() {
		// Reset edit mode flags
		editCategoryMode = false;
		currentCategoryId = null;
		showCategoryForm = false;
		
		// Reset form to initial state
		$categoryForm = {
			name: '',
			description: '',
			parent_id: '',
			is_public: false
		};
	}
	
	// Function to toggle category form visibility
	function toggleCategoryForm() {
		// If we're closing the form and in edit mode, cancel the edit
		if (showCategoryForm && editCategoryMode) {
			cancelCategoryEdit();
		} else {
			// If we're opening the form for a new category, reset edit mode
			if (!showCategoryForm) {
				editCategoryMode = false;
				currentCategoryId = null;
				// Reset form
				$categoryForm = {
					name: '',
					description: '',
					parent_id: '',
					is_public: false
				};
			}
			
			// Toggle form visibility
			showCategoryForm = !showCategoryForm;
		}
	}
</script>

<div class="dashboard-container">
	<header class="dashboard-header">
		<div class="user-info">
			{#if user.avatarUrl}
				<img class="avatar" src={user.avatarUrl} alt="Avatar" />
			{:else}
				<div class="avatar-placeholder">{initial}</div>
			{/if}
			<div class="user-details">
				<h1 class="welcome">Welcome, {fullName}</h1>
				<button class="logout-button" on:click={() => goto('/logout')}>Logout</button>
			</div>
		</div>
	</header>

	<div class="dashboard-tabs">
		<button 
			class="tab-button {activeTab === 'projects' ? 'active' : ''}" 
			on:click={() => setActiveTab('projects')}
		>
			Projects
		</button>
		<button 
			class="tab-button {activeTab === 'parts' ? 'active' : ''}" 
			on:click={() => setActiveTab('parts')}
		>
			Parts
		</button>
		<button 
			class="tab-button {activeTab === 'manufacturers' ? 'active' : ''}" 
			on:click={() => setActiveTab('manufacturers')}
		>
			Manufacturers
		</button>
		<button 
			class="tab-button {activeTab === 'suppliers' ? 'active' : ''}" 
			on:click={() => setActiveTab('suppliers')}
		>
			Suppliers
		</button>
		<button 
			class="tab-button {activeTab === 'categories' ? 'active' : ''}" 
			on:click={() => setActiveTab('categories')}
		>
			Categories
		</button>
	</div>

	<section class="dashboard-content">
		<!-- Projects Tab -->
		{#if activeTab === 'projects'}
			<div class="tab-content">
				<h2>Your Projects</h2>
				{#if projects.length > 0}
					<ul class="projects-grid">
						{#each projects as project (project.id)}
							<li class="project-card">
								<a class="project-link" href={`/dashboard/${project.id}`}>{project.name}</a>
							</li>
						{/each}
					</ul>
				{:else}
					<p class="no-items">You have no projects yet.</p>
				{/if}

				<h2>Add New Project</h2>
				<form class="project-form" method="POST" action="?/project">
					<input class="project-input" type="text" name="name" placeholder="Project Name" required />
					<button class="primary-btn" type="submit">Add Project</button>
				</form>
			</div>
		{/if}

		<!-- Parts Tab -->
		{#if activeTab === 'parts'}
			<div class="tab-content">
				<h2>Your Parts</h2>
				{#if userParts.length > 0}
					<div class="user-items-grid">
						{#each userParts as part (part.id)}
							<div class="entity-card">
								<h3>{part.name}</h3>
								<p class="entity-meta">Version: {part.version || '1.0.0'}</p>
								<p class="entity-meta">Status: {part.status || 'Draft'}</p>
								<div class="entity-actions">
									<a href={`/parts/${part.id}`} class="icon-btn view-btn" title="View Part Details">👁️</a>
									<a href={`/parts/${part.id}/edit`} class="icon-btn edit-btn" title="Edit Part">✏️</a>
								</div>
							</div>
						{/each}
					</div>
				{:else}
					<p class="no-items">You haven't created any parts yet.</p>
				{/if}

				<div class="action-buttons">
					<button type="button" class="primary-btn" on:click={() => showPartForm = !showPartForm}>
						{showPartForm ? 'Cancel' : 'Add New Part'}
					</button>
					<a href="/parts" class="secondary-btn">View All Parts</a>
				</div>

				{#if showPartForm}
					<div class="form-container">
						<h2>Create New Part</h2>
						
						{#if $partMessage}
							<div class="form-message {$partMessage.includes('Failed') ? 'error' : 'success'}">
								{$partMessage}
							</div>
						{/if}
						
						<div class="embedded-form">
							<form method="POST" action="?/part" use:partEnhance>
								<PartForm 
									form={$partForm} 
									errors={$partErrors} 
									statuses={data.statuses}
									packageTypes={data.packageTypes}
									weightUnits={data.weightUnits}
									dimensionUnits={data.dimensionUnits}
									enhance={partEnhance}
								/>
								
								<div class="form-button-group">
									<button type="submit" class="primary-btn" disabled={$partSubmitting}>
										{$partSubmitting ? 'Creating...' : 'Create Part'}
									</button>
									<button type="button" class="secondary-btn" on:click={() => showPartForm = false}>Cancel</button>
								</div>
							</form>
						</div>
					</div>
				{/if}
			</div>
		{/if}

		<!-- Manufacturers Tab -->
		{#if activeTab === 'manufacturers'}
			<div class="tab-content">
				<h2>Your Manufacturers</h2>
				{#if userManufacturers.length > 0}
					<div class="user-items-grid">
						{#each userManufacturers as manufacturer (manufacturer.id)}
							<div class="entity-card manufacturer-card">
								<div class="card-header">
									{#if manufacturer.logo_url}
										<div class="logo-container">
											<img src={manufacturer.logo_url} alt={`${manufacturer.name} logo`} class="manufacturer-logo" />
										</div>
									{:else}
										<div class="logo-placeholder">
											<span>{manufacturer.name.substring(0, 2).toUpperCase()}</span>
										</div>
									{/if}
									<h3 class="manufacturer-name">{manufacturer.name}</h3>
								</div>
								
								<div class="card-content">
									{#if manufacturer.description}
										<p class="entity-description">
											{manufacturer.description.length > 100 ? 
												`${manufacturer.description.substring(0, 100)}...` : 
												manufacturer.description}
										</p>
									{:else}
										<p class="entity-no-description">No description provided</p>
									{/if}
									
									{#if manufacturer.website_url}
										<p class="entity-meta website-link">
											<span class="meta-label">Website:</span> 
											<a href={manufacturer.website_url} target="_blank" rel="noopener noreferrer" class="website-url">
												{new URL(manufacturer.website_url).hostname}
											</a>
										</p>
									{/if}
									
									<p class="entity-meta">
										<span class="meta-label">Created:</span> 
										<span class="date-value">
											{new Date(manufacturer.created_at).toLocaleDateString()}
										</span>
									</p>
								</div>
								
								<div class="entity-actions">
									<a href={`/manufacturer/${manufacturer.id}/edit`} class="icon-btn edit-btn" title="Edit Manufacturer">✏️</a>
									<a href="/manufacturer" class="icon-btn view-btn" title="View All Manufacturers">👁️</a>
								</div>
							</div>
						{/each}
					</div>
				{:else}
					<p class="no-items">You haven't created any manufacturers yet.</p>
				{/if}

				<div class="action-buttons">
					<button type="button" class="primary-btn" on:click={() => showManufacturerForm = !showManufacturerForm}>
						{showManufacturerForm ? 'Cancel' : 'Add New Manufacturer'}
					</button>
					<a href="/manufacturer" class="secondary-btn">View All Manufacturers</a>
				</div>

				{#if showManufacturerForm}
					<div class="form-container">
						<h2>Create New Manufacturer</h2>
						
						{#if $manufacturerMessage}
							<div class="form-message {$manufacturerMessage.includes('Failed') ? 'error' : 'success'}">
								{$manufacturerMessage}
							</div>
						{/if}
						
						<form method="POST" action="?/manufacturer" use:manufacturerEnhance class="form-grid">
							<div class="form-group">
								<label for="mfr-name">Name <span class="required">*</span></label>
								<input 
									id="mfr-name" 
									name="name" 
									bind:value={$manufacturerForm.name} 
									class="form-input"
									placeholder="Enter manufacturer name"
									required 
								/>
								{#if $manufacturerErrors.name}
									<span class="field-error">{$manufacturerErrors.name}</span>
								{/if}
							</div>
							
							<div class="form-group">
								<label for="mfr-description">Description</label>
								<textarea 
									id="mfr-description" 
									name="description" 
									bind:value={$manufacturerForm.description}
									class="form-textarea"
									rows="3"
									placeholder="Enter a description of the manufacturer"
								></textarea>
								{#if $manufacturerErrors.description}
									<span class="field-error">{$manufacturerErrors.description}</span>
								{/if}
							</div>
							
							<div class="form-group">
								<label for="mfr-website">Website URL</label>
								<input 
									id="mfr-website" 
									name="website_url" 
									type="url" 
									class="form-input"
									bind:value={$manufacturerForm.website_url} 
									placeholder="https://example.com"
								/>
								{#if $manufacturerErrors.website_url}
									<span class="field-error">{$manufacturerErrors.website_url}</span>
								{/if}
							</div>
							
							<div class="form-group">
								<label for="mfr-logo">Logo URL</label>
								<input 
									id="mfr-logo" 
									name="logo_url" 
									type="url" 
									class="form-input"
									bind:value={$manufacturerForm.logo_url}
									placeholder="https://example.com/logo.png"
								/>
								{#if $manufacturerErrors.logo_url}
									<span class="field-error">{$manufacturerErrors.logo_url}</span>
								{/if}
							</div>
							
							<div class="form-actions">
								<button type="submit" class="primary-btn" disabled={$manufacturerSubmitting}>
									{$manufacturerSubmitting ? 'Creating...' : 'Create Manufacturer'}
								</button>
								<button type="button" class="secondary-btn" on:click={() => showManufacturerForm = false}>Cancel</button>
							</div>
						</form>
					</div>
				{/if}
			</div>
		{/if}

		<!-- Suppliers Tab -->
		{#if activeTab === 'suppliers'}
			<div class="tab-content">
				<h2>Your Suppliers</h2>
				{#if userSuppliers.length > 0}
					<div class="user-items-grid">
						{#each userSuppliers as supplier (supplier.id)}
							<div class="entity-card">
								<div class="card-header">
									{#if supplier.logo_url}
										<div class="logo-container">
											<img src={supplier.logo_url} alt={`${supplier.name} logo`} class="entity-logo" />
										</div>
									{:else}
										<div class="logo-placeholder">
											<span>{supplier.name.substring(0, 2).toUpperCase()}</span>
										</div>
									{/if}
									<h3 class="entity-name">{supplier.name}</h3>
								</div>
								
								<div class="card-content">
									{#if supplier.description}
										<p class="entity-description">
											{supplier.description.length > 60 ? 
												`${supplier.description.substring(0, 60)}...` : 
												supplier.description}
										</p>
									{:else}
										<p class="entity-no-description">No description provided</p>
									{/if}
									
									{#if supplier.website_url}
										<p class="entity-meta website-link">
											<span class="meta-label">Website:</span> 
											<a href={supplier.website_url} target="_blank" rel="noopener noreferrer" class="website-url">
												{new URL(supplier.website_url).hostname}
											</a>
										</p>
									{/if}
									
									{#if supplier.contact_info}
										{@const contact = processContactInfo(supplier.contact_info)}
										<div class="entity-meta contact-info">
											<span class="meta-label">Contact:</span>
											{#if contact.email}
												<a href="mailto:{contact.email}" class="contact-value">{contact.email}</a>
											{:else if contact.phone}
												<a href="tel:{contact.phone}" class="contact-value">{contact.phone}</a>
											{:else if contact.text}
												<span class="contact-value">{contact.text.length > 30 ? contact.text.substring(0, 30) + '...' : contact.text}</span>
											{:else}
												<span class="contact-value">Available</span>
											{/if}
										</div>
									{/if}
									
									<p class="entity-meta">
										<span class="meta-label">Created:</span> 
										<span class="date-value">
											{new Date(supplier.created_at).toLocaleDateString()}
										</span>
									</p>
								</div>
								
								<div class="entity-actions">
									<a href={`/supplier/${supplier.id}/edit`} class="icon-btn edit-btn" title="Edit Supplier">✏️</a>
									<a href="/supplier" class="icon-btn view-btn" title="View All Suppliers">👁️</a>
								</div>
							</div>
						{/each}
					</div>
				{:else}
					<p class="no-items">You haven't created any suppliers yet.</p>
				{/if}

				<div class="action-buttons">
					<button type="button" class="primary-btn" on:click={() => showSupplierForm = !showSupplierForm}>
						{showSupplierForm ? 'Cancel' : 'Add New Supplier'}
					</button>
					<a href="/supplier" class="secondary-btn">View All Suppliers</a>
				</div>
				
				{#if showSupplierForm}
					<div class="form-container">
						<h2>Create New Supplier</h2>
						
						{#if $supplierMessage}
							<div class="form-message {$supplierMessage.includes('Failed') ? 'error' : 'success'}">
								{$supplierMessage}
							</div>
						{/if}
						
						<form method="POST" action="?/supplier" use:supplierEnhance class="form-grid">
							<div class="form-group">
								<label for="sup-name">Name <span class="required">*</span></label>
								<input 
									id="sup-name" 
									name="name" 
									bind:value={$supplierForm.name} 
									class="form-input"
									placeholder="Enter supplier name"
									required 
								/>
								{#if $supplierErrors.name}
									<span class="field-error">{$supplierErrors.name}</span>
								{/if}
							</div>
							
							<div class="form-group">
								<label for="sup-description">Description</label>
								<textarea 
									id="sup-description" 
									name="description" 
									bind:value={$supplierForm.description} 
									class="form-textarea"
									placeholder="Enter supplier description"
									rows="3"
								></textarea>
								{#if $supplierErrors.description}
									<span class="field-error">{$supplierErrors.description}</span>
								{/if}
							</div>
							
							<div class="form-group">
								<label for="sup-website">Website URL</label>
								<input 
									id="sup-website" 
									name="website_url" 
									type="url"
									bind:value={$supplierForm.website_url} 
									class="form-input"
									placeholder="https://example.com"
								/>
								{#if $supplierErrors.website_url}
									<span class="field-error">{$supplierErrors.website_url}</span>
								{/if}
							</div>
							
							<div class="form-group">
								<label for="sup-contact">Contact Information</label>
								<input
									id="sup-contact" 
									name="contact_info" 
									bind:value={$supplierForm.contact_info} 
									class="form-input"
									placeholder="Enter contact info (e.g., email or phone)"
								/>
								{#if $supplierErrors.contact_info}
									<span class="field-error">{$supplierErrors.contact_info}</span>
								{/if}
							</div>
							
							<div class="form-group">
								<label for="sup-logo">Logo URL</label>
								<input 
									id="sup-logo" 
									name="logo_url" 
									type="url"
									bind:value={$supplierForm.logo_url} 
									class="form-input"
									placeholder="https://example.com/logo.png"
								/>
								{#if $supplierErrors.logo_url}
									<span class="field-error">{$supplierErrors.logo_url}</span>
								{/if}
							</div>
							
							<div class="form-actions">
								<button type="submit" class="primary-btn" disabled={$supplierSubmitting}>
									{$supplierSubmitting ? 'Creating...' : 'Create Supplier'}
								</button>
								<button type="button" class="secondary-btn" on:click={() => showSupplierForm = false}>Cancel</button>
							</div>
						</form>
					</div>
				{/if}
			</div>
		{/if}

		<!-- Categories Tab -->
		{#if activeTab === 'categories'}
			<div class="tab-content">
				<h2>Your Categories</h2>
				
				<!-- No duplicate form here -->

				<!-- User's categories list -->
				{#if userCategories.length > 0}
					<div class="user-items-grid">
						{#each userCategories as category}
							<Category {category} currentUserId={user.id} allCategories={allCategories} />
						{/each}
					</div>
				{:else}
					<p class="no-items">You haven't created any categories yet.</p>
				{/if}
				
				<div class="action-buttons">
					<button type="button" class="primary-btn" on:click={toggleCategoryForm}>
						{showCategoryForm ? 'Hide Form' : 'Add New Category'}
					</button>
					<a href="/catagory" class="secondary-btn">View All Categories</a>
				</div>
				
				{#if showCategoryForm}
					<div class="form-container">
						<h2>{editCategoryMode ? 'Edit' : 'Create New'} Category</h2>
						
						{#if $categoryMessage}
							<div class="form-message {$categoryMessage.includes('Failed') ? 'error' : 'success'}">
								{$categoryMessage}
							</div>
						{/if}
						
						<div class="embedded-form">
							<form method="POST" action="?/category" use:categoryEnhance enctype="application/x-www-form-urlencoded">
								{#if editCategoryMode}
									<input type="hidden" name="categoryId" value={currentCategoryId} />
								{/if}
								<div class="form-group">
									<label for="name">Name*</label>
									<input id="name" name="name" bind:value={$categoryForm.name} required />
									{#if $categoryErrors.name}<span class="error">{$categoryErrors.name}</span>{/if}
								</div>
								
								<div class="form-group">
									<label for="parent_id">Parent Category</label>
									<CategoryComboBox 
										categories={categories} 
										bind:value={$categoryForm.parent_id} 
										name="parent_id" 
										placeholder="Select parent category..." 
									/>
									{#if $categoryErrors.parent_id}<span class="error">{$categoryErrors.parent_id}</span>{/if}
								</div>
								
								<div class="form-group">
									<label for="description">Description</label>
									<textarea id="description" name="description" bind:value={$categoryForm.description}></textarea>
									{#if $categoryErrors.description}<span class="error">{$categoryErrors.description}</span>{/if}
								</div>
								
								<div class="form-group checkbox-group">
									<label>
										<input type="checkbox" name="is_public" bind:checked={$categoryForm.is_public} /> 
										Public
									</label>
									{#if $categoryErrors.is_public}<span class="error">{$categoryErrors.is_public}</span>{/if}
								</div>
								
								<div class="form-button-group">
									<button type="submit" class="primary-btn" disabled={$categorySubmitting}>
										{$categorySubmitting ? (editCategoryMode ? 'Saving...' : 'Creating...') : (editCategoryMode ? 'Save Changes' : 'Create Category')}
									</button>
									<button type="button" class="secondary-btn" on:click={cancelCategoryEdit}>Cancel</button>
								</div>
							</form>
						</div>
					</div>
				{/if}
			</div>
		{/if}
	</section>
</div>

<style>
	.dashboard-container {
		max-width: 1000px;
		margin: 2rem auto;
		padding: 0;
	}

	.dashboard-header {
		display: flex;
		align-items: center;
		justify-content: space-between;
		padding: 1rem 2rem;
		background: linear-gradient(135deg, #6a11cb, #2575fc);
		border-radius: 8px 8px 0 0;
		color: white;
	}

	.user-info {
		display: flex;
		align-items: center;
		gap: 1rem;
	}

	.avatar {
		width: 50px;
		height: 50px;
		border-radius: 50%;
		object-fit: cover;
	}

	.avatar-placeholder {
		width: 50px;
		height: 50px;
		background: #ddd;
		border-radius: 50%;
		display: flex;
		align-items: center;
		justify-content: center;
		font-weight: bold;
		color: #555;
	}

	.entity-card .logo-container {
		width: 50px;
		height: 50px;
		border-radius: 8px;
		overflow: hidden;
		display: flex;
		align-items: center;
		justify-content: center;
		flex-shrink: 0;
		border: 1px solid #eaeaea;
	}

	.user-details {
		display: flex;
		align-items: center;
		gap: 1rem;
	}

	.welcome {
		margin: 0;
		font-size: 1.5rem;
	}

	.logout-button {
		background: white;
		color: #6a11cb;
		border: none;
		padding: 0.5rem 1rem;
		border-radius: 4px;
		cursor: pointer;
		transition: background 0.3s;
	}

	.logout-button:hover {
		background: #f0f0f0;
	}

	/* Dashboard Tabs Styling */
	.dashboard-tabs {
		display: flex;
		justify-content: space-between;
		background: #f3f4f6;
		border-bottom: 1px solid #e5e7eb;
	}

	.tab-button {
		flex: 1;
		padding: 1rem 0.5rem;
		background: transparent;
		border: none;
		border-bottom: 2px solid transparent;
		cursor: pointer;
		font-weight: 600;
		transition: all 0.2s ease;
		color: #6b7280;
	}

	.tab-button:hover {
		background: #e5e7eb;
		color: #2575fc;
	}

	.tab-button.active {
		border-bottom: 2px solid #2575fc;
		color: #2575fc;
	}

	/* Dashboard Content Styling */
	.dashboard-content {
		background: white;
		padding: 2rem;
		border-radius: 0 0 8px 8px;
		box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
	}

	.tab-content {
		animation: fadeIn 0.3s ease;
	}

	@keyframes fadeIn {
		from { opacity: 0; }
		to { opacity: 1; }
	}

	.tab-content h2 {
		margin-top: 0;
		color: #333;
		margin-bottom: 1.5rem;
	}

	.projects-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
		gap: 1rem;
		margin: 1rem 0 2rem 0;
	}

	.user-items-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
		gap: 1.5rem;
		margin: 1rem 0 2rem 0;
	}

	.project-card {
		background: #f9f9f9;
		padding: 1rem;
		border-radius: 8px;
		text-align: center;
		transition: box-shadow 0.3s;
		border: 1px solid #e5e7eb;
	}

	.project-card:hover {
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
		border-color: #2575fc;
	}

	.project-link {
		color: #2575fc;
		font-weight: bold;
		text-decoration: none;
	}

	.project-link:hover {
		text-decoration: underline;
	}

	.no-items {
		color: #777;
		font-style: italic;
		padding: 1rem;
		background: #f9f9f9;
		border-radius: 8px;
		text-align: center;
		margin-bottom: 2rem;
	}

	.form-container {
		margin-top: 2rem;
		padding: 2rem;
		background: #f9f9f9;
		border-radius: 12px;
		border: 1px solid #e0e0e0;
		box-shadow: 0 4px 6px rgba(0,0,0,0.05);
	}

	.form-container h2 {
		margin-top: 0;
		margin-bottom: 1rem;
		color: #333;
		border-bottom: 1px solid #e0e0e0;
		padding-bottom: 0.5rem;
	}

	.embedded-form {
		margin-top: 1rem;
	}

	.form-message {
		padding: 0.75rem 1rem;
		border-radius: 6px;
		margin-bottom: 1rem;
	}

	.form-message.success {
		background: #d1fae5;
		border: 1px solid #34d399;
		color: #065f46;
	}

	.form-message.error {
		background: #fee2e2;
		border: 1px solid #f87171;
		color: #b91c1c;
	}

	.entity-card {
		background: white;
		border: 1px solid #e5e7eb;
		border-radius: 8px;
		padding: 1rem;
		transition: all 0.2s ease;
		box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
	}
	
	.entity-card {
		padding: 1.25rem;
		box-shadow: 0 2px 10px rgba(0,0,0,0.05);
		transition: all 0.2s ease;
	}
	
	.entity-card .card-header {
		display: flex;
		align-items: center;
		margin-bottom: 1rem;
		gap: 1rem;
	}

	.entity-card .entity-logo {
		width: 100%;
		height: 100%;
		object-fit: contain;
		object-position: center;
	}

	.entity-card .logo-placeholder {
		width: 50px;
		height: 50px;
		border-radius: 8px;
		background: linear-gradient(135deg, #6a11cb, #2575fc);
		display: flex;
		align-items: center;
		justify-content: center;
		color: white;
		font-weight: bold;
		flex-shrink: 0;
	}

	.entity-card .entity-name {
		margin: 0;
		font-size: 1.2rem;
		color: #333;
		font-weight: 600;
	}

	.entity-card .card-header {
		display: flex;
		align-items: center;
		margin-bottom: 1rem;
		gap: 1rem;
	}

	.entity-card .card-content {
		margin-bottom: 1.25rem;
	}

	.entity-card:hover {
		border-color: #2575fc;
		box-shadow: 0 5px 15px rgba(0,0,0,0.1);
		transform: translateY(-2px);
		border-color: #d0d0d0;
	}

	.entity-card h3 {
		margin-top: 0;
		margin-bottom: 0.5rem;
		font-size: 1.1rem;
		color: #111827;
	}

	.entity-meta {
		margin: 0.25rem 0;
		font-size: 0.875rem;
		color: #6b7280;
		display: flex;
		align-items: center;
		gap: 0.5rem;
	}

	.meta-label {
		font-weight: 600;
		color: #444;
	}
	
	.entity-description {
		font-size: 0.95rem;
		line-height: 1.5;
		color: #444;
		margin-bottom: 1rem;
	}
	
	.entity-no-description {
		font-size: 0.95rem;
		color: #888;
		font-style: italic;
		margin-bottom: 1rem;
	}
	
	.website-link {
		display: flex;
		align-items: center;
	}
	
	.website-url {
		color: #4285f4;
		text-decoration: none;
		font-size: 0.825rem;
		word-break: break-all;
	}
	
	.website-url:hover {
		text-decoration: underline;
	}
	
	.contact-value {
		color: #444;
		font-size: 0.825rem;
		word-break: break-all;
	}
	
	.contact-info {
		display: flex;
		align-items: center;
		gap: 0.5rem;
	}
	
	.date-value {
		color: #666;
	}

	.entity-actions {
		display: flex;
		gap: 0.5rem;
		margin-top: 0.75rem;
		justify-content: flex-end;
	}

	.icon-btn {
		padding: 0.25rem 0.5rem;
		border-radius: 4px;
		font-size: 1rem;
		transition: all 0.2s ease;
		text-decoration: none;
	}

	.view-btn:hover {
		background: #f3f4f6;
	}

	.edit-btn:hover {
		background: #eef2ff;
	}

	.project-form {
		display: flex;
		gap: 1rem;
		margin-top: 1rem;
	}

	.project-input {
		flex: 1;
		padding: 0.75rem;
		border: 1px solid #ccc;
		border-radius: 6px;
		font-size: 1rem;
	}

	.action-buttons {
		display: flex;
		gap: 1rem;
		margin-top: 1.5rem;
	}

	.form-grid {
		display: grid;
		gap: 1.5rem;
	}

	.form-group {
		display: flex;
		flex-direction: column;
		gap: 0.5rem;
	}

	.form-input, .form-textarea {
		padding: 0.75rem;
		border: 2px solid #e5e7eb;
		border-radius: 6px;
		font-size: 1rem;
		transition: all 0.2s ease;
		width: 100%;
	}

	.form-input:focus, .form-textarea:focus {
		outline: none;
		border-color: #2575fc;
		box-shadow: 0 0 0 3px rgba(37, 117, 252, 0.1);
	}

	.form-textarea {
		resize: vertical;
		min-height: 100px;
	}

	.form-actions {
		margin-top: 1.5rem;
		display: flex;
		justify-content: flex-end;
		gap: 0.75rem;
	}

	.field-error {
		color: #dc2626;
		font-size: 0.875rem;
		padding: 0.25rem 0.5rem;
		background: #fef2f2;
		border-radius: 4px;
		border: 1px solid #fecaca;
	}

	.required {
		color: #dc2626;
	}

	.primary-btn {
		background: #2575fc;
		color: white;
		border: none;
		padding: 0.75rem 1.5rem;
		border-radius: 6px;
		cursor: pointer;
		transition: all 0.2s ease;
		font-weight: 600;
		text-decoration: none;
		display: inline-flex;
		align-items: center;
		justify-content: center;
	}

	.primary-btn:hover {
		background: #1c60d6;
		transform: translateY(-1px);
		box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
	}

	.secondary-btn {
		background: white;
		color: #2575fc;
		border: 1px solid #2575fc;
		padding: 0.75rem 1.5rem;
		border-radius: 6px;
		cursor: pointer;
		transition: all 0.2s ease;
		font-weight: 600;
		text-decoration: none;
		display: inline-flex;
		align-items: center;
		justify-content: center;
	}

	.secondary-btn:hover {
		background: #f0f7ff;
		transform: translateY(-1px);
	}

	@media (max-width: 768px) {
		.dashboard-tabs {
			flex-wrap: wrap;
		}

		.tab-button {
			flex: 1 0 33.333%;
			padding: 0.75rem 0.5rem;
		}

		.action-buttons {
			flex-direction: column;
		}
	}

	@media (max-width: 600px) {
		.dashboard-header {
			flex-direction: column;
			gap: 1rem;
		}

		.tab-button {
			flex: 1 0 50%;
			font-size: 0.9rem;
		}

		.dashboard-content {
			padding: 1.25rem;
		}

		.projects-grid,
		.user-items-grid {
			grid-template-columns: 1fr;
		}
	}
</style>
