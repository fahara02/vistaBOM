<!-- src/lib/components/dashboard/manufacturers-tab.svelte -->
<script lang="ts">
    import { createEventDispatcher, onMount } from 'svelte';
    import { slide } from 'svelte/transition';
    import ManufacturerCard from '$lib/components/cards/manufacturer.svelte';
    import ManufacturerForm from '$lib/components/forms/ManufacturerForm.svelte';
    import GridView from '$lib/components/grid/GridView.svelte';
    import { superForm } from 'sveltekit-superforms/client';
    import type { SuperForm, SuperValidated } from 'sveltekit-superforms';
    import { z } from 'zod';
    
    // Import types from types and formTypes
    import type { Manufacturer, JsonValue } from '$lib/types/types';
    import type { DashboardManufacturer, ManufacturerFormData } from '$lib/types/formTypes';
    import type { GridEntity } from '$lib/types/grid';
    
    // Define a type-safe schema for the manufacturer form
    const manufacturerFormSchema = z.object({
        manufacturer_id: z.string().optional().default(''),
        manufacturer_name: z.string().min(1, { message: 'Manufacturer name is required' }),
        manufacturer_description: z.string().nullable().optional(),
        website_url: z.string().nullable().optional(),
        logo_url: z.string().nullable().optional(),
        contact_info: z.string().nullable().optional(),
        custom_fields: z.string().nullable().optional(),
        custom_fields_json: z.string().nullable().optional(),
        created_by: z.string().optional(),
        updated_by: z.string().optional(),
        created_at: z.date().optional(),
        updated_at: z.date().optional()
    });
    
    // Create type from schema
    type ManufacturerFormSchema = z.infer<typeof manufacturerFormSchema>;
    
    // Accept both Manufacturer and DashboardManufacturer types
    type ManufacturerData = Manufacturer | DashboardManufacturer;
    
    // Event dispatcher
    const dispatch = createEventDispatcher();
    
    // Props
    export let manufacturers: ManufacturerData[] = [];
    export let currentUserId: string;
    export let showForm: boolean = false;
    export let editMode: boolean = false;
    
    // Form props - passed to ManufacturerForm component
    export let manufacturerForm: ManufacturerFormSchema = {
        manufacturer_id: '',
        manufacturer_name: '',
        manufacturer_description: '',
        website_url: '',
        logo_url: '',
        contact_info: '{}',
        custom_fields: '{}',
        custom_fields_json: '{}',
        created_by: currentUserId,
        updated_by: currentUserId
    };
    export let manufacturerErrors: Record<string, string | string[]> = {};
    
    // Additional props for SuperForm integration
    export let formId: string = 'manufacturer-form';
    export let formAction: string = '?/manufacturer';
    export let superFormData: SuperValidated<ManufacturerFormSchema> | undefined = undefined;
    export let useInternalForm: boolean = false;
    
    // Local state
    let selectedManufacturer: ManufacturerData | null = null;
    let viewMode: 'grid' | 'list' = 'grid'; // Default to grid view
    let hiddenFormElement: HTMLFormElement;
    
    // Create a proper SuperForm instance only when conditions are met
    let superFormInstance: ReturnType<typeof superForm<ManufacturerFormSchema>> | undefined;
    
    // Default values for internal form to avoid undefined errors
    const defaultFormValues: ManufacturerFormSchema = {
        manufacturer_id: '',
        manufacturer_name: '',
        manufacturer_description: '',
        website_url: '',
        logo_url: '',
        contact_info: '{}',
        custom_fields: '{}',
        custom_fields_json: '{}',
        created_by: '',  // Will be set correctly when currentUserId is available
        updated_by: ''   // Will be set correctly when currentUserId is available
    };
    
    // Prepare for SuperForm state tracking
    let internalForm: ManufacturerFormSchema = defaultFormValues;
    let internalErrors: Record<string, string[]> = {};
    
    // Initialize the form
    function initializeSuperForm() {
        if (!useInternalForm) return;
        
        // Create a new blank form if no data is provided
        const initialData = {
            ...defaultFormValues,
            created_by: currentUserId,
            updated_by: currentUserId
        };
        
        superFormInstance = superForm<ManufacturerFormSchema>(superFormData || initialData, {
            id: formId,
            dataType: 'json',
            resetForm: true,
            validationMethod: 'submit-only',
            taintedMessage: null,
            // We'll use the default form validation
            // No custom validators needed
            onResult: ({ result }) => {
                console.log('Manufacturer form submission result:', result);
                if (result.type === 'success') {
                    // Reset form state
                    showForm = false;
                    editMode = false;
                    selectedManufacturer = null;
                    
                    // Refresh data
                    dispatch('refreshData');
                }
            }
        });
        
        // Subscribe to the form values
        const unsubscribeForm = superFormInstance.form.subscribe(value => {
            internalForm = value;
        });
        
        // Subscribe to the form errors
        const unsubscribeErrors = superFormInstance.errors.subscribe(value => {
            internalErrors = value;
        });
        
        // Clean up subscriptions when component is destroyed
        onMount(() => {
            return () => {
                unsubscribeForm && unsubscribeForm();
                unsubscribeErrors && unsubscribeErrors();
            };
        });
    }
   
    // Methods
    function toggleForm(): void {
        dispatch('toggleForm');
    }
    
    function handleManufacturerDeleted(): void {
        // Notify parent to refresh the data
        dispatch('refreshData');
    }
    
    // Initialize the form when component mounts
    onMount(initializeSuperForm);
    
    // Re-initialize when dependencies change
    $: if (useInternalForm && (superFormData || currentUserId)) {
        initializeSuperForm();
    }
    
    // Derived values from internal or external form
    $: formData = useInternalForm && superFormInstance 
        ? internalForm 
        : manufacturerForm;
        
    $: formErrors = useInternalForm && superFormInstance 
        ? internalErrors 
        : manufacturerErrors;
    
    // Handle edit event from manufacturer card
function handleManufacturerEdit(event: CustomEvent<{ manufacturer: ManufacturerData }>): void {
    console.log('Received edit event in manufacturers-tab:', event);
    
    // Extract manufacturer data from the event
    const manufacturerData = event.detail.manufacturer;
    
    // Set selected manufacturer
    selectedManufacturer = manufacturerData;
    
    // Format the manufacturer data for the form with proper type handling
    const formattedManufacturer: ManufacturerFormSchema = {
        manufacturer_id: manufacturerData.manufacturer_id || '',
        manufacturer_name: manufacturerData.manufacturer_name || '',
        manufacturer_description: manufacturerData.manufacturer_description || '',
        website_url: manufacturerData.website_url || '',
        logo_url: manufacturerData.logo_url || '',
        // Ensure contact_info is a string for the form
        contact_info: typeof manufacturerData.contact_info === 'object' 
            ? JSON.stringify(manufacturerData.contact_info) 
            : (typeof manufacturerData.contact_info === 'string' ? manufacturerData.contact_info : '{}'),
        // Ensure custom_fields is a string for the form
        custom_fields: typeof manufacturerData.custom_fields === 'object'
            ? JSON.stringify(manufacturerData.custom_fields)
            : (typeof manufacturerData.custom_fields === 'string' ? manufacturerData.custom_fields : '{}'),
        custom_fields_json: typeof manufacturerData.custom_fields === 'object'
            ? JSON.stringify(manufacturerData.custom_fields)
            : (typeof manufacturerData.custom_fields === 'string' ? manufacturerData.custom_fields : '{}'),
        created_by: manufacturerData.created_by || currentUserId,
        updated_by: currentUserId
    };
    
    // Update internal form if using it
    if (useInternalForm && superFormInstance) {
        superFormInstance.form.set(formattedManufacturer);
    } else {
        // Forward the edit event to the parent component with properly formatted data
        dispatch('editManufacturer', { manufacturer: formattedManufacturer });
    }
    
    // Update UI state
    editMode = true;
    showForm = true;
}

// Handle edit event from GridView component
function handleGridManufacturerEdit(event: CustomEvent<{ item: GridEntity }>) {
    selectedManufacturer = event.detail.item as Manufacturer;
    editMode = true;
    showForm = true;
}
    
    // // Handle edit event from manufacturer card
    // function handleManufacturerCardEdit(event: CustomEvent<{ manufacturer: ManufacturerData }>): void {
    //     console.log('Received edit event in manufacturers-tab:', event);
        
    //     // Extract manufacturer data from the event
    //     const manufacturerData = event.detail.manufacturer;
        
    //     // Format the manufacturer data for the form
    //     const formattedManufacturer = {
    //         ...manufacturerData,
    //         // Ensure contact_info is a string for the form
    //         contact_info: typeof manufacturerData.contact_info === 'object' 
    //             ? JSON.stringify(manufacturerData.contact_info) 
    //             : manufacturerData.contact_info || '{}',
    //         // Ensure custom_fields is a string for the form
    //         custom_fields: typeof manufacturerData.custom_fields === 'object'
    //             ? JSON.stringify(manufacturerData.custom_fields)
    //             : manufacturerData.custom_fields || '{}'
    //     };
        
    //     // Forward the edit event to the parent component with properly formatted data
    //     dispatch('editManufacturer', { manufacturer: formattedManufacturer });
    // }
</script>

<div class="tab-container">
    <h2>Your Manufacturers</h2>
    
    <!-- View mode toggle -->
    <div class="view-mode-toggle">
        <button 
            class="view-toggle-btn" 
            class:active={viewMode === 'grid'} 
            on:click={() => viewMode = 'grid'}
            aria-label="Grid view"
        >
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <rect x="3" y="3" width="7" height="7"></rect>
                <rect x="14" y="3" width="7" height="7"></rect>
                <rect x="14" y="14" width="7" height="7"></rect>
                <rect x="3" y="14" width="7" height="7"></rect>
            </svg>
        </button>
        
        <button 
            class="view-toggle-btn"
            class:active={viewMode === 'list'}
            on:click={() => viewMode = 'list'}
            aria-label="List view"
        >
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <line x1="8" y1="6" x2="21" y2="6"></line>
                <line x1="8" y1="12" x2="21" y2="12"></line>
                <line x1="8" y1="18" x2="21" y2="18"></line>
                <line x1="3" y1="6" x2="3.01" y2="6"></line>
                <line x1="3" y1="12" x2="3.01" y2="12"></line>
                <line x1="3" y1="18" x2="3.01" y2="18"></line>
            </svg>
        </button>
    </div>

    <!-- List of manufacturers -->
    {#if manufacturers && manufacturers.length > 0}
        {#if viewMode === 'grid'}
            <!-- Compact grid view with inline expansion -->
            <GridView 
            items={manufacturers}
            entityType="manufacturer"
            {currentUserId}
            on:edit={handleGridManufacturerEdit}  
            on:refresh={handleManufacturerDeleted}
        />
        {:else}
            <!-- Traditional card view -->
            <div class="user-items-grid">
                {#each manufacturers as manufacturer (manufacturer.manufacturer_id)}
                <ManufacturerCard 
                {manufacturer} 
                {currentUserId}
                allowEdit={currentUserId === manufacturer.created_by} 
                allowDelete={currentUserId === manufacturer.created_by}
                on:edit={handleManufacturerEdit} 
                on:deleted={handleManufacturerDeleted}
            />
                {/each}
            </div>
        {/if}
    {:else}
        <p class="no-items">You haven't created any manufacturers yet.</p>
    {/if}
    
    <!-- Toggle form button -->
    <div class="action-buttons">
        <button type="button" class="primary-btn" on:click={toggleForm}>
            {showForm ? 'Cancel' : 'Add New Manufacturer'}
        </button>
        <a href="/manufacturer" class="secondary-btn">View All Manufacturers</a>
    </div>
    
    <!-- Manufacturer form -->
    {#if showForm}
        <div class="form-container enhanced-form" transition:slide={{ duration: 300 }}>
            <h2 class="form-title">{editMode ? 'Edit Manufacturer' : 'Create New Manufacturer'}</h2>
            
            <ManufacturerForm 
                data={manufacturerForm}
                errors={manufacturerErrors}
                submitText={editMode ? 'Save Changes' : 'Create Manufacturer'}
                isEditMode={editMode}
                hideButtons={false}
                currentUserId={currentUserId}
                on:submit={(event: CustomEvent) => dispatch('submit', event.detail)}
                on:cancel={() => dispatch('cancelEdit')}
                on:formUpdate={(event: CustomEvent) => dispatch('formUpdate', event.detail)}
            />
        </div>
    {/if}
</div>

<!-- Hidden form for SuperForm submissions -->
{#if useInternalForm && superFormInstance}
    <div class="hidden-form-container" style="display: none;" aria-hidden="true">
        <form method="POST" action={formAction} use:superFormInstance.enhance bind:this={hiddenFormElement} id={formId}>
            <!-- Standard fields -->
            <input type="hidden" name="manufacturer_id" value={formData?.manufacturer_id || ''} />
            <input type="hidden" name="manufacturer_name" value={formData?.manufacturer_name || ''} />
            <input type="hidden" name="manufacturer_description" value={formData?.manufacturer_description || ''} />
            <input type="hidden" name="website_url" value={formData?.website_url || ''} />
            <input type="hidden" name="logo_url" value={formData?.logo_url || ''} />
            <input type="hidden" name="contact_info" value={formData?.contact_info || '{}'} />
            <input type="hidden" name="custom_fields" value={formData?.custom_fields || '{}'} />
            <input type="hidden" name="custom_fields_json" value={formData?.custom_fields_json || '{}'} />
            
            <!-- User tracking fields -->
            <input type="hidden" name="created_by" value={currentUserId} />
            <input type="hidden" name="updated_by" value={currentUserId} />
        </form>
    </div>
{/if}

<style>
    .tab-container {
        width: 100%;
    }
    
    h2 {
        margin: 0 0 1.5rem 0;
        font-size: 1.75rem;
        color: hsl(var(--foreground));
    }
    
    .user-items-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }
    
    .no-items {
        padding: 1rem;
        background: hsl(var(--muted) / 0.3);
        border-radius: 8px;
        text-align: center;
        color: hsl(var(--muted-foreground));
    }
    
    .action-buttons {
        display: flex;
        gap: 1rem;
        margin-bottom: 2rem;
    }
    
    .primary-btn {
        background: hsl(var(--primary));
        color: hsl(var(--primary-foreground));
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 6px;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.3s;
    }
    
    .primary-btn:hover {
        background: hsl(var(--primary-dark));
    }
    
    .view-mode-toggle {
        display: flex;
        align-items: center;
        justify-content: flex-end;
        margin-bottom: 1rem;
        gap: 0.5rem;
    }
    
    .view-toggle-btn {
        background: transparent;
        border: 1px solid hsl(var(--border));
        border-radius: 4px;
        padding: 0.5rem;
        cursor: pointer;
        color: hsl(var(--muted-foreground));
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .view-toggle-btn:hover {
        border-color: hsl(var(--primary));
        color: hsl(var(--primary));
    }
    
    .view-toggle-btn.active {
        background: hsl(var(--primary));
        color: hsl(var(--primary-foreground));
        border-color: hsl(var(--primary));
    }
    
    .secondary-btn {
        background: hsl(var(--background));
        color: hsl(var(--primary));
        border: 1px solid hsl(var(--primary));
        padding: 0.75rem 1.5rem;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.2s ease;
        font-weight: 600;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }
    
    .secondary-btn:hover {
        background: hsl(var(--primary) / 0.1);
        transform: translateY(-1px);
    }
    
    .form-container {
        background: hsl(var(--card));
        border: 1px solid hsl(var(--border));
        border-radius: 8px;
        padding: 1.5rem;
        margin-bottom: 2rem;
        box-shadow: 0 2px 10px hsl(var(--muted) / 0.2);
    }
    
    .form-title {
        margin-top: 0;
        margin-bottom: 1.5rem;
        font-size: 1.5rem;
        color: hsl(var(--card-foreground));
    }
    
    @media (max-width: 768px) {
        .action-buttons {
            flex-direction: column;
        }
    }
    
    @media (max-width: 600px) {
        .user-items-grid {
            grid-template-columns: 1fr;
        }
    }
</style>
